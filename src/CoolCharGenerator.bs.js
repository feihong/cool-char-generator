// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Util$ReactTemplate from "./Util.bs.js";
import * as Emoji$ReactTemplate from "./Emoji.bs.js";
import * as IntlChar$ReactTemplate from "./IntlChar.bs.js";

function str(prim) {
  return prim;
}

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -325826967,
    "Hangul"
  ],
  /* tuple */[
    3257036,
    "Any"
  ],
  /* tuple */[
    50782054,
    "Emoji"
  ],
  /* tuple */[
    83233512,
    "Hieroglyphs"
  ],
  /* tuple */[
    90688528,
    "Devanagari"
  ],
  /* tuple */[
    836565865,
    "Kana"
  ],
  /* tuple */[
    894130468,
    "Hanzi"
  ]
];

function modeToJs(param) {
  return Js_mapperRt.binarySearch(7, param, jsMapperConstantArray);
}

function modeFromJs(param) {
  return Js_mapperRt.revSearch(7, jsMapperConstantArray, param);
}

var component = ReasonReact.reducerComponent("CoolCharGenerator");

function make() {
  var modeFromJsEvent = function (evt) {
    var match = modeFromJs(Util$ReactTemplate.eventTargetValue(evt));
    if (match) {
      return match[0];
    } else {
      return /* Any */3257036;
    }
  };
  var getMode = function (mode) {
    if (mode === /* Any */3257036) {
      return Util$ReactTemplate.chooseFromArray(/* array */[
                  /* Hanzi */894130468,
                  /* Hangul */-325826967,
                  /* Kana */836565865,
                  /* Devanagari */90688528,
                  /* Hieroglyphs */83233512,
                  /* Emoji */50782054
                ]);
    } else {
      return mode;
    }
  };
  var getCoolChar = function (mode) {
    var language = getMode(mode);
    var exit = 0;
    if (language >= 83233513) {
      if (language !== 90688528 && language !== 836565865 && language !== 894130468) {
        return /* record */[
                /* text */"?",
                /* caption */"?"
              ];
      } else {
        exit = 1;
      }
    } else if (language !== -325826967) {
      if (language !== 50782054) {
        if (language >= 83233512) {
          exit = 1;
        } else {
          return /* record */[
                  /* text */"?",
                  /* caption */"?"
                ];
        }
      } else {
        var emoji = Emoji$ReactTemplate.getEmoji(/* () */0);
        return /* record */[
                /* text */emoji[/* text */1],
                /* caption */Curry._2(Printf.sprintf(/* Format */[
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " (",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* ")" */41,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "%s (%s)"
                        ]), emoji[/* shortname */0], emoji[/* category */2])
              ];
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var ic = IntlChar$ReactTemplate.getIntlChar(language);
      return /* record */[
              /* text */ic[/* text */0],
              /* caption */Curry._2(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "Writing system: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    ", Code point: ",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ]),
                        "Writing system: %s, Code point: %d"
                      ]), ic[/* writingSystem */1], ic[/* ordinal */2])
            ];
    }
    
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* AddChar */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var changeModeOption = function (mode) {
                var modeStr = modeToJs(mode);
                return React.createElement("option", {
                            key: modeStr,
                            value: modeStr
                          }, modeStr);
              };
              return React.createElement("div", undefined, React.createElement("div", {
                              className: "form-inline"
                            }, React.createElement("select", {
                                  className: "form-control mr-2",
                                  value: modeToJs(state[/* mode */1]),
                                  onChange: (function (evt) {
                                      return Curry._1(send, /* ChangeMode */[modeFromJsEvent(evt)]);
                                    })
                                }, Belt_Array.map(/* array */[
                                      /* Any */3257036,
                                      /* Hanzi */894130468,
                                      /* Hangul */-325826967,
                                      /* Kana */836565865,
                                      /* Devanagari */90688528,
                                      /* Hieroglyphs */83233512,
                                      /* Emoji */50782054
                                    ], changeModeOption)), React.createElement("button", {
                                  className: "btn btn-primary btn-sm mr-2",
                                  onClick: (function () {
                                      return Curry._1(send, /* AddChar */0);
                                    })
                                }, "Generate"), React.createElement("button", {
                                  className: "btn btn-primary btn-sm",
                                  onClick: (function () {
                                      return Curry._1(send, /* Clear */1);
                                    })
                                }, "Clear")), React.createElement("div", {
                              className: "chars"
                            }, Belt_Array.mapWithIndex(state[/* chars */0], (function (i, cc) {
                                    return React.createElement("span", {
                                                key: String(i),
                                                title: cc[/* caption */1]
                                              }, cc[/* text */0]);
                                  }))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* chars : array */[],
                      /* mode : Any */3257036
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* chars : array */[],
                              /* mode */state[/* mode */1]
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* chars */Belt_Array.concat(state[/* chars */0], /* array */[getCoolChar(state[/* mode */1])]),
                              /* mode */state[/* mode */1]
                            ]]);
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* chars */state[/* chars */0],
                            /* mode */action[0]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  str ,
  modeToJs ,
  modeFromJs ,
  component ,
  make ,
  
}
/* component Not a pure module */
