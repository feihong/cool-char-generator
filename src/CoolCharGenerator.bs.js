// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Random from "bs-platform/lib/es6/random.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Emoji$ReactTemplate from "./Emoji.bs.js";
import * as Hanzi$ReactTemplate from "./Hanzi.bs.js";

function str(prim) {
  return prim;
}

function eventTargetValue(evt) {
  return evt.target.value;
}

Random.self_init(/* () */0);

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -659631771,
    "Either"
  ],
  /* tuple */[
    50782054,
    "Emoji"
  ],
  /* tuple */[
    894130468,
    "Hanzi"
  ]
];

function modeToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray);
}

function modeFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray, param);
}

function modeFromJsEvent(evt) {
  var match = modeFromJs(evt.target.value);
  if (match) {
    return match[0];
  } else {
    return /* Either */-659631771;
  }
}

var component = ReasonReact.reducerComponent("CoolCharGenerator");

function getMode(mode) {
  if (mode === /* Either */-659631771) {
    var match = Random.$$int(2);
    if (match !== 0) {
      return /* Emoji */50782054;
    } else {
      return /* Hanzi */894130468;
    }
  } else {
    return mode;
  }
}

function getCoolChar(mode) {
  var match = getMode(mode);
  if (match !== 894130468) {
    var emoji = Emoji$ReactTemplate.getEmoji(/* () */0);
    return /* record */[
            /* text */emoji[/* text */1],
            /* caption */Curry._2(Printf.sprintf(/* Format */[
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " (",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* ")" */41,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      "%s (%s)"
                    ]), emoji[/* shortname */0], emoji[/* category */2])
          ];
  } else {
    var hanzi = Hanzi$ReactTemplate.getHanzi(/* () */0);
    return /* record */[
            /* text */hanzi[/* text */0],
            /* caption */Curry._1(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Code point: ",
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "Code point: %d"
                    ]), hanzi[/* ordinal */1])
          ];
  }
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* AddChar */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var changeModeOption = function (mode) {
                var modeStr = modeToJs(mode);
                return React.createElement("option", {
                            value: modeStr
                          }, modeStr);
              };
              return React.createElement("div", undefined, React.createElement("div", {
                              className: "form-inline"
                            }, React.createElement("select", {
                                  className: "form-control mr-2",
                                  value: modeToJs(state[/* mode */1]),
                                  onChange: (function (evt) {
                                      return Curry._1(send, /* ChangeMode */[modeFromJsEvent(evt)]);
                                    })
                                }, changeModeOption(/* Hanzi */894130468), changeModeOption(/* Emoji */50782054), changeModeOption(/* Either */-659631771)), React.createElement("button", {
                                  className: "btn btn-primary btn-sm mr-2",
                                  onClick: (function () {
                                      return Curry._1(send, /* AddChar */0);
                                    })
                                }, "Generate"), React.createElement("button", {
                                  className: "btn btn-primary btn-sm",
                                  onClick: (function () {
                                      return Curry._1(send, /* Clear */1);
                                    })
                                }, "Clear")), React.createElement("div", {
                              className: "chars"
                            }, Belt_Array.mapWithIndex(state[/* chars */0], (function (i, cc) {
                                    return React.createElement("span", {
                                                key: String(i),
                                                title: cc[/* caption */1]
                                              }, cc[/* text */0]);
                                  }))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* chars : array */[],
                      /* mode : Either */-659631771
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* chars : array */[],
                              /* mode */state[/* mode */1]
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* chars */Belt_Array.concat(state[/* chars */0], /* array */[getCoolChar(state[/* mode */1])]),
                              /* mode */state[/* mode */1]
                            ]]);
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* chars */state[/* chars */0],
                            /* mode */action[0]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  str ,
  eventTargetValue ,
  modeToJs ,
  modeFromJs ,
  modeFromJsEvent ,
  component ,
  getMode ,
  getCoolChar ,
  make ,
  
}
/*  Not a pure module */
