// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as Util$ReactTemplate from "./Util.bs.js";

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -325826967,
    "Hangul"
  ],
  /* tuple */[
    83233512,
    "Hieroglyphs"
  ],
  /* tuple */[
    90688528,
    "Devanagari"
  ],
  /* tuple */[
    836565865,
    "Kana"
  ],
  /* tuple */[
    894130468,
    "Hanzi"
  ]
];

function writingSystemToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray);
}

function writingSystemFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray, param);
}

function getCharFromRange(min, max) {
  var ordinal = Util$ReactTemplate.randomIntRange(min, max);
  var text = String.fromCodePoint(ordinal);
  return /* tuple */[
          text,
          ordinal
        ];
}

function getCharFromCodePoints(codePoints) {
  var ordinal = Util$ReactTemplate.chooseFromArray(codePoints);
  var text = String.fromCodePoint(ordinal);
  return /* tuple */[
          text,
          ordinal
        ];
}

var kanaCodePoints = Curry._1(Util$ReactTemplate.stringToCodePoints, (
  '゠ァアィイゥウェエォオカグケゲコゴサザシジスズセダチヂッツヅテデトドナニバパヒビピフブプヘベペホムメモャヤュユョヨラリルヰヱヲンヴヵヶヷヸヹヺぁあぃいぅうぇえぉおかぐけげこごさざしじすずせだちぢっつづてでとどなにばぱひびぴふぶぷへべぺほむめもゃやゅゆょよらりるゐゑをんゔゕゖ'
));

var devanagariCodePoints = Curry._1(Util$ReactTemplate.stringToCodePoints, (
  'ऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढणतथदधनऩपफबभमयरऱलळऴवशषसहऽॐक़ख़ग़ज़ड़ढ़फ़य़ॠॡ१२३४५६७८९ॲॳॴॵॶॷॸॹॺॻॼॽॾॿ'
));

function getIntlChar(writingSys) {
  var match = writingSys !== 83233512 ? (
      writingSys >= 836565865 ? (
          writingSys >= 894130468 ? getCharFromRange(19968, 40959) : getCharFromCodePoints(kanaCodePoints)
        ) : (
          writingSys >= 90688528 ? getCharFromCodePoints(devanagariCodePoints) : getCharFromRange(44032, 55215)
        )
    ) : getCharFromRange(77824, 78894);
  var label = writingSystemToJs(writingSys);
  return /* record */[
          /* text */match[0],
          /* writingSystem */label,
          /* ordinal */match[1]
        ];
}

export {
  writingSystemToJs ,
  writingSystemFromJs ,
  getCharFromRange ,
  getCharFromCodePoints ,
  kanaCodePoints ,
  devanagariCodePoints ,
  getIntlChar ,
  
}
/* kanaCodePoints Not a pure module */
