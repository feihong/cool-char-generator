// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as Util$ReactTemplate from "./Util.bs.js";

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -790390071,
    "Tibetan"
  ],
  /* tuple */[
    -766220796,
    "Cuneiform"
  ],
  /* tuple */[
    -325826967,
    "Hangul"
  ],
  /* tuple */[
    -45475687,
    "OldPersian"
  ],
  /* tuple */[
    83233512,
    "Hieroglyphs"
  ],
  /* tuple */[
    90688528,
    "Devanagari"
  ],
  /* tuple */[
    836565865,
    "Kana"
  ],
  /* tuple */[
    894130468,
    "Hanzi"
  ]
];

function writingSystemToJs(param) {
  return Js_mapperRt.binarySearch(8, param, jsMapperConstantArray);
}

function writingSystemFromJs(param) {
  return Js_mapperRt.revSearch(8, jsMapperConstantArray, param);
}

function getCharFromRange(min, max) {
  var ordinal = Util$ReactTemplate.randomIntRange(min, max);
  var text = String.fromCodePoint(ordinal);
  return /* tuple */[
          text,
          ordinal
        ];
}

function getCharFromCodePoints(codePoints) {
  var ordinal = Util$ReactTemplate.chooseFromArray(codePoints);
  var text = String.fromCodePoint(ordinal);
  return /* tuple */[
          text,
          ordinal
        ];
}

var kanaCodePoints = Curry._1(Util$ReactTemplate.stringToCodePoints, (
  '゠ァアィイゥウェエォオカグケゲコゴサザシジスズセダチヂッツヅテデトドナニバパヒビピフブプヘベペホムメモャヤュユョヨラリルヰヱヲンヴヵヶヷヸヹヺぁあぃいぅうぇえぉおかぐけげこごさざしじすずせだちぢっつづてでとどなにばぱひびぴふぶぷへべぺほむめもゃやゅゆょよらりるゐゑをんゔゕゖ'
));

var devanagariCodePoints = Curry._1(Util$ReactTemplate.stringToCodePoints, (
  'ऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढणतथदधनऩपफबभमयरऱलळऴवशषसहऽॐकखगजडढफयॠॡ१२३४५६७८९ॲॳॴॵॶॷॸॹॺॻॼॽॾॿ'
));

var tibetanCodePoints = Curry._1(Util$ReactTemplate.stringToCodePoints, (
  'ༀ༁༂༃༄༅༆༇༈༉༊༒༓༔༕༖༗༘༜༡༢༣༤༥༦༧༨༩༪༫༬༭༮༯༰༱༲༳༴༸༺༻༼༽ཀཁགགངཅཆཇཉཊཋཌཌཎཏཐདདནཔཕབབམཙཚཛཛཝཞཟའཡརལཤཥསཧཨཀཪཫཬིཻོཽྀ྅ྈྉྊྋ྿࿂࿃࿄࿅࿇࿈࿉࿊࿋࿌࿏࿐࿑࿓࿔࿕࿖࿗࿘'
));

var oldPersianCodePoints = /* array */[
  66464,
  66465,
  66466,
  66467,
  66468,
  66469,
  66470,
  66471,
  66472,
  66473,
  66474,
  66475,
  66476,
  66477,
  66478,
  66479,
  66480,
  66481,
  66482,
  66483,
  66484,
  66485,
  66486,
  66487,
  66488,
  66489,
  66490,
  66491,
  66492,
  66493,
  66494,
  66495,
  66496,
  66497,
  66498,
  66499,
  66504,
  66505,
  66506,
  66507,
  66508,
  66509,
  66510,
  66511,
  66512,
  66513,
  66514,
  66515,
  66516,
  66517
];

function getIntlChar(writingSys) {
  var match = writingSys >= 83233512 ? (
      writingSys >= 836565865 ? (
          writingSys >= 894130468 ? getCharFromRange(19968, 40959) : getCharFromCodePoints(kanaCodePoints)
        ) : (
          writingSys >= 90688528 ? getCharFromCodePoints(devanagariCodePoints) : getCharFromRange(77824, 78894)
        )
    ) : (
      writingSys >= -325826967 ? (
          writingSys >= -45475687 ? getCharFromCodePoints(oldPersianCodePoints) : getCharFromRange(44032, 55215)
        ) : (
          writingSys >= -766220796 ? getCharFromRange(73728, 74751) : getCharFromCodePoints(tibetanCodePoints)
        )
    );
  var label = writingSystemToJs(writingSys);
  return /* record */[
          /* text */match[0],
          /* writingSystem */label,
          /* ordinal */match[1]
        ];
}

export {
  writingSystemToJs ,
  writingSystemFromJs ,
  getCharFromRange ,
  getCharFromCodePoints ,
  kanaCodePoints ,
  devanagariCodePoints ,
  tibetanCodePoints ,
  oldPersianCodePoints ,
  getIntlChar ,
  
}
/* kanaCodePoints Not a pure module */
